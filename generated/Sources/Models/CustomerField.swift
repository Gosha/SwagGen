//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class CustomerField: APIModel {

    public var customerCompany: CustomerCompany?

    public var customerEmail: String?

    public var customerLocation: PlaceInfo?

    public var customerNameField: CustomerNameField?

    public var customerNote: Message?

    public var customerPhone: String?

    public class CustomerCompany: APIModel {

        public var name: String

        public var orgNr: String

        public init(name: String, orgNr: String) {
            self.name = name
            self.orgNr = orgNr
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            name = try container.decode("name")
            orgNr = try container.decode("orgNr")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encode(name, forKey: "name")
            try container.encode(orgNr, forKey: "orgNr")
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? CustomerCompany else { return false }
          guard self.name == object.name else { return false }
          guard self.orgNr == object.orgNr else { return false }
          return true
        }

        public static func == (lhs: CustomerCompany, rhs: CustomerCompany) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public class CustomerNameField: APIModel {

        public var firstName: String?

        public var lastName: String?

        public var nickName: String?

        public var persNumber: String?

        public init(firstName: String? = nil, lastName: String? = nil, nickName: String? = nil, persNumber: String? = nil) {
            self.firstName = firstName
            self.lastName = lastName
            self.nickName = nickName
            self.persNumber = persNumber
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            firstName = try container.decodeIfPresent("firstName")
            lastName = try container.decodeIfPresent("lastName")
            nickName = try container.decodeIfPresent("nickName")
            persNumber = try container.decodeIfPresent("persNumber")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encodeIfPresent(firstName, forKey: "firstName")
            try container.encodeIfPresent(lastName, forKey: "lastName")
            try container.encodeIfPresent(nickName, forKey: "nickName")
            try container.encodeIfPresent(persNumber, forKey: "persNumber")
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? CustomerNameField else { return false }
          guard self.firstName == object.firstName else { return false }
          guard self.lastName == object.lastName else { return false }
          guard self.nickName == object.nickName else { return false }
          guard self.persNumber == object.persNumber else { return false }
          return true
        }

        public static func == (lhs: CustomerNameField, rhs: CustomerNameField) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(customerCompany: CustomerCompany? = nil, customerEmail: String? = nil, customerLocation: PlaceInfo? = nil, customerNameField: CustomerNameField? = nil, customerNote: Message? = nil, customerPhone: String? = nil) {
        self.customerCompany = customerCompany
        self.customerEmail = customerEmail
        self.customerLocation = customerLocation
        self.customerNameField = customerNameField
        self.customerNote = customerNote
        self.customerPhone = customerPhone
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        customerCompany = try container.decodeIfPresent("CustomerCompany")
        customerEmail = try container.decodeIfPresent("CustomerEmail")
        customerLocation = try container.decodeIfPresent("CustomerLocation")
        customerNameField = try container.decodeIfPresent("CustomerNameField")
        customerNote = try container.decodeIfPresent("CustomerNote")
        customerPhone = try container.decodeIfPresent("CustomerPhone")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(customerCompany, forKey: "CustomerCompany")
        try container.encodeIfPresent(customerEmail, forKey: "CustomerEmail")
        try container.encodeIfPresent(customerLocation, forKey: "CustomerLocation")
        try container.encodeIfPresent(customerNameField, forKey: "CustomerNameField")
        try container.encodeIfPresent(customerNote, forKey: "CustomerNote")
        try container.encodeIfPresent(customerPhone, forKey: "CustomerPhone")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? CustomerField else { return false }
      guard self.customerCompany == object.customerCompany else { return false }
      guard self.customerEmail == object.customerEmail else { return false }
      guard self.customerLocation == object.customerLocation else { return false }
      guard self.customerNameField == object.customerNameField else { return false }
      guard self.customerNote == object.customerNote else { return false }
      guard self.customerPhone == object.customerPhone else { return false }
      return true
    }

    public static func == (lhs: CustomerField, rhs: CustomerField) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
